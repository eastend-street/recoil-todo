{"version":3,"sources":["styles/GlobalStyle.ts","styles/Theme.tsx","store/TodoList.ts","styles/FontAwesome.tsx","styles/Fade.tsx","components/Todo/index.tsx","components/TodoList/index.tsx","components/AddButton/index.tsx","components/Main/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GlobalStyle","createGlobalStyle","theme","colors","fonts","fontSizes","small","medium","large","breakpoints","xxxs","xxs","xs","xsm","sm","md","lg","Theme","children","todoListState","atom","key","default","id","name","isDone","library","add","fas","CheckFontAwesome","coffeeIconDefinition","findIconDefinition","prefix","iconName","icon","fadeIn","keyframes","fadeOut","StyledFade","styled","div","props","show","Fade","useState","render","setRender","useEffect","onAnimationEnd","Container","CompleteButton","button","Input","input","Todo","todoName","setTodoName","setTodoList","useSetRecoilState","onClick","prevTodoList","map","todo","value","onChange","e","target","TodoList","todoList","useRecoilValue","Button","AddButton","length","StyledH1","Main","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.948d38fc.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    padding: 0;\n    font-family: 'Roboto', sans-serif;\n    background-color: #eee;\n  }\n\n  a {\n    text-decoration: none;\n    color: inherit;\n    &:focus,\n    &:hover,\n    &:visited,\n    &:link,\n    &:active {\n      text-decoration: none;\n    }\n    &:hover {\n      opacity: 0.7;\n      transition: 0.5s;\n    }\n  }\n`;\n\nexport default GlobalStyle;\n","import React, { ReactNode } from \"react\";\nimport { ThemeProvider } from \"styled-components\";\n\nconst theme = {\n  colors: {},\n  fonts: [\"Roboto\", \"sans-serif\"],\n  fontSizes: {\n    small: \"1rem\",\n    medium: \"2rem\",\n    large: \"3rem\",\n  },\n  breakpoints: {\n    xxxs: 400,\n    xxs: 500,\n    xs: 600,\n    xsm: 750,\n    sm: 960,\n    md: 1280,\n    lg: 1960,\n  },\n};\n\ntype ThemeProps = {\n  children: ReactNode;\n};\n\nconst Theme: React.FC<ThemeProps> = ({ children }) => (\n  <ThemeProvider theme={theme}>{children}</ThemeProvider>\n);\n\nexport default Theme;\n","import { atom } from \"recoil\";\n\nexport type Todo = {\n  id: number;\n  name: string;\n  isDone: boolean;\n};\n\nconst initialState: Todo[] = [\n  { id: 1, name: \"Buy tomato\", isDone: false },\n  { id: 2, name: \"Pay rent\", isDone: false },\n  { id: 3, name: \"Clean kitchen\", isDone: false },\n  { id: 4, name: \"Sent email to Dave\", isDone: false },\n  { id: 5, name: \"Physics assignment\", isDone: false },\n];\n\nexport const todoListState = atom({\n  key: \"TodoListState\",\n  default: initialState,\n});\n","import React from \"react\";\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  IconLookup,\n  IconDefinition,\n  findIconDefinition,\n  library,\n} from \"@fortawesome/fontawesome-svg-core\";\n\nlibrary.add(fas);\n\nexport const CheckFontAwesome: React.FC = () => {\n  const coffeeLookup: IconLookup = { prefix: \"fas\", iconName: \"check\" };\n  const coffeeIconDefinition: IconDefinition = findIconDefinition(coffeeLookup);\n\n  return <FontAwesomeIcon icon={coffeeIconDefinition} />;\n};\n","import React, { ReactNode, useEffect, useState } from \"react\";\nimport styled, { keyframes } from \"styled-components\";\n\ntype FadeProps = {\n  show: any;\n  children: ReactNode;\n};\n\nconst Fade = ({ show, children }: FadeProps) => {\n  const [render, setRender] = useState(show);\n\n  useEffect(() => {\n    if (show) setRender(true);\n  }, [show]);\n\n  const onAnimationEnd = () => {\n    if (!show) setRender(false);\n  };\n\n  return (\n    render && (\n      <StyledFade show={show} onAnimationEnd={onAnimationEnd}>\n        {children}\n      </StyledFade>\n    )\n  );\n};\n\nconst fadeIn = keyframes`\n  0% {\n    opacity: 0\n  }\n  50% {\n    opacity: 0.5;\n  }\n  100% {\n    opacity: 1;\n  }\n`;\n\nconst fadeOut = keyframes`\n  0% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n  100% {\n    opacity: 0;\n  }\n`;\n\ntype StyledFadeProps = {\n  show: boolean;\n};\n\nconst StyledFade = styled.div`\n  overflow: hidden;\n  animation: ${(props: StyledFadeProps) => (props.show ? fadeIn : fadeOut)} 0.5s\n    linear forwards;\n`;\n\nexport default Fade;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { useSetRecoilState } from \"recoil\";\n\nimport { todoListState, Todo as TodoType } from \"store/TodoList\";\nimport { CheckFontAwesome } from \"styles/FontAwesome\";\nimport Fade from \"styles/Fade\";\n\nconst Todo: React.FC<TodoType> = ({ id, name, isDone }) => {\n  const [todoName, setTodoName] = useState<string>(name);\n  const setTodoList = useSetRecoilState(todoListState);\n\n  const editTodoName = (input: string) => {\n    setTodoName(input);\n\n    setTodoList((prevTodoList: TodoType[]) => {\n      return prevTodoList.map((todo) =>\n        todo.id === id ? { ...todo, name: todoName } : todo\n      );\n    });\n  };\n\n  const toggleComplete = () => {\n    setTodoList((prevTodoList: TodoType[]) => {\n      return prevTodoList.map((todo) =>\n        todo.id === id ? { ...todo, isDone: !todo.isDone } : todo\n      );\n    });\n  };\n\n  return (\n    <Fade show={!isDone}>\n      <Container>\n        <CompleteButton isDone={isDone} onClick={toggleComplete}>\n          <CheckFontAwesome />\n        </CompleteButton>\n        <Input\n          value={todoName}\n          onChange={(e) => editTodoName(e.target.value)}\n        />\n      </Container>\n    </Fade>\n  );\n};\n\ntype isDoneProps = {\n  isDone: boolean;\n};\n\nconst Container = styled.div`\n  border-bottom: 0.05rem solid #e0e0e0;\n  display: flex;\n  padding: 0.5rem 1rem;\n  &:hover {\n    background-color: rgba(196, 196, 196, 0.1);\n  }\n\n  &:focus-within {\n    background-color: #fff;\n  }\n`;\n\nconst CompleteButton = styled.button`\n  background-color: ${(props: isDoneProps) =>\n    props.isDone ? \"#25aaf5\" : \"#fff\"};\n  border: 0.05rem solid #e0e0e0;\n  border-radius: 50%;\n  color: ${(props: isDoneProps) => (props.isDone ? \"#fff\" : \"#e0e0e0\")};\n  font-size: 0.8rem;\n  outline: none;\n  padding: 0.3rem;\n  &:hover {\n    cursor: pointer;\n    opacity: 0.7;\n    transition: 0.3s;\n  }\n`;\n\nconst Input = styled.input`\n  margin: 0 1rem;\n  background-color: transparent;\n  border: none;\n  display: block;\n  font-size: 1rem;\n  outline: none;\n  padding: 0;\n  width: 100%;\n`;\n\nexport default Todo;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useRecoilValue } from \"recoil\";\n\nimport { todoListState, Todo as TodoType } from \"store/TodoList\";\nimport Todo from \"components/Todo\";\n\nconst TodoList: React.FC = () => {\n  const todoList = useRecoilValue(todoListState);\n  return (\n    <Container>\n      {todoList.map((todo: TodoType) => (\n        <Todo {...todo} key={todo.id} />\n      ))}\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  margin: 1rem 0;\n`;\n\nexport default TodoList;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { useSetRecoilState } from \"recoil\";\n\nimport { todoListState, Todo as TodoType } from \"store/TodoList\";\n\nconst AddButton: React.FC = () => {\n  const setTodoList = useSetRecoilState(todoListState);\n\n  const addTodo = () => {\n    setTodoList((prevTodoList: TodoType[]) => [\n      ...prevTodoList,\n      {\n        id: prevTodoList.length + 1,\n        name: \"\",\n        isDone: false,\n      },\n    ]);\n  };\n\n  return <Button onClick={addTodo}>Add Task</Button>;\n};\n\nconst Button = styled.button`\n  background-color: #25aaf5;\n  border: none;\n  border-radius: 0.2rem;\n  color: #fff;\n  display: block;\n  font-size: 1rem;\n  margin: 0 auto;\n  outline: none;\n  padding: 0.5rem 0;\n  width: 50%;\n\n  &:hover {\n    cursor: pointer;\n    opacity: 0.7;\n    transition: 0.3s;\n  }\n`;\n\nexport default AddButton;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport TodoList from \"components/TodoList\";\nimport AddButton from \"components/AddButton\";\n\nconst Main: React.FC = () => {\n  return (\n    <Container>\n      <StyledH1>Recoil Todo</StyledH1>\n      <TodoList />\n      <AddButton />\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  background-color: #fff;\n  box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.25);\n  min-height: 30rem;\n  margin: 3rem auto 0;\n  padding: 2rem 0;\n  width: 25rem;\n`;\n\nconst StyledH1 = styled.div`\n  font-size: 1.5rem;\n  font-weight: bold;\n  margin-bottom: 1rem;\n  text-align: center;\n`;\n\nexport default Main;\n","import React from \"react\";\nimport { RecoilRoot } from \"recoil\";\n\nimport GlobalStyle from \"styles/GlobalStyle\";\nimport Theme from \"styles/Theme\";\n\nimport Main from \"components/Main\";\n\nconst App: React.FC = () => {\n  return (\n    <RecoilRoot>\n      <Theme>\n        <GlobalStyle />\n        <Main />\n      </Theme>\n    </RecoilRoot>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'App';\nimport * as serviceWorker from 'serviceWorker';\nimport \"styles/fonts.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}